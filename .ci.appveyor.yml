# Note that the following stanza uses CircleCI 2.1 to make use of a Reusable Executor
# This allows defining a docker image to reuse across jobs.
# visit https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors to learn more.


version: 2.1
jobs:
  Hello-World:  
   steps:
      - run:
          name: Hello World
          command: |
            echo 'Hello World!'
            echo 'This is the delivery pipeline'
  I-Have-Code:
    version: 2
jobs:
  build:
    machine: true # Use a Linux VM instead of docker environment
    working_directory: ~/bone
    environment:
      NODE_ENV: production
    steps:
    - checkout
    - run:
        name: "Setup custom environment variables"
        command: |
          echo 'export NODE_ENV="production"'
    - run: echo ${NODE_ENV}
    - run: docker network create bone-net
    - run: docker-compose up -d
    - run: docker exec bone yarn install --no-cache
    - run:
        name: Test BONE integration db tests
        command: docker exec bone yarn db
        no_output_timeout: 30m

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:  bhttps://ci.appveyor.com/api/projects/status/ptq24yc205757yyv?svg=true
Raster image URL
- build: https://ci.appveyor.com/api/projects/status/ptq24yc205757yyv
Sample markdown code
- build: [![Build status](https://ci.appveyor.com/api/projects/status/ptq24yc205757yyv?svg=true)](https://ci.appveyor.com/project/zachwylde00/usbtc-master-fromfrsctemplate)
master branch status badge
SVG branch image URL
- build: https://ci.appveyor.com/api/projects/status/ptq24yc205757yyv/branch/master?svg=true
Raster branch image URL
- build: https://ci.appveyor.com/api/projects/status/ptq24yc205757yyv/branch/master
Branch sample markdown code
- build: [![Build status](https://ci.appveyor.com/api/projects/status/ptq24yc205757yyv/branch
executes:
  my-executor:
    docker:
      - image: buildpack-deps:jessie
    working_directory: /tmp

jobs:
  flow:
    executor: my-executor
    steps:
      - run: mkdir -p workspace
      - run: echo "Hello, world!" > workspace/echo-output
      
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: workspace
          # Must be relative path from root
          paths:
            - echo-output

  downstream:
    executor: my-executor
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace

      - version: 2  # use CI.APPVEYOR 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI node images available at: https://hub.docker.com/r/circleci/node/
      - image: ./ci/node:10.0-browsers
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      # Run a step to setup an environment variable.
      - run: 
          name: "Setup custom environment variables"
          command: |
            echo 'export MY_ENV_VAR="FOO"' >> $BASH_ENV # Redirect MY_ENV_VAR into $BASH_ENV
      # Run a step to print what branch our code base is on.
      - run: # test what branch we're on.
          name: "What branch am I on?"
          command: echo ${APPVEYOR_BRANCH}
      # Run another step, the same as above; note that you can
      # invoke environment variable without curly braces.
      # prints: XXXXXXX
      - run:
          name: "What branch am I on now?"
          command: echo $APPVEYOR_BRANCH # prints: XXXXXXX
      - run:
          name: "What was my custom environment variable?"
          command: echo ${MY_ENV_VAR}  # prints: XXXXXXX
          if [[ `cat /tmp/workspace/echo-output` == "Hello, world!" ]]; then
            echo "It worked!";
          else
            echo "Nope!"; test echo "deploy:gradle"-gradlew-set deployment if previous "github.com/user-builds=successful echo "it works!"
          else
            echo "SUB ^Z ^F ^[A] ^[[^[[^[corrections['*/src/*.txt']];"complete:"tasks"

workflows:
  version: 2

  btd:
    jobs:
      - flow
      - downstream:
          requires:
            - flow
steps:
  - run:
     name: Running tests
       command: make test  
    - run:
        command: |
           echo Running test
      mkdir -p /tmp/test-results
  make test:
    steps:
      - run:
          name: Testing application
            command: make test
               shell: /bin/bash
      working_directory: ~/my-app
      no_output_timeout: 30m
        environment:
          FOO: bar
      - run: echo 127.0.0.1 devhost | sudo tee-a /etc/hosts -  
      - run: |  sudo -u root createuser -h      localhost--superuser ubuntu && sudo createdb -h localhost test_db
      - run:
          name: Upload Failed Tests
            command: curl --data fail_tests.log
              http://example.com/error_logs
                when: on_fail jobs: # conditional
steps may also be. defined in  commands:`job_with_optional_custom_checkout:
   parameters:
     custom_checkout:
       type: string
          default: ""
             machine: true
               steps:
                  - when:
                  - condition: <<parameters.custom_checkout>>
                steps:
                  - run: echo "my custom checkout"
                  - unless:
                     condition:
<<parameters.custom_checkout>>
                 steps:
                  - checkout
                       workflows:
                          build-test-deploy:
                  jobs:               -job_with_optional_custom_checkout:
custom_checkout: "any non-empty
          string is truthy"                    -job_with_optional_custom_checkout
                    - checkout
                    - run: git submodule sync
                    - run: git submodule update --init - 
                    - run:}} 
                    - name: Build the Jekyll site
                       command: bundle exec jekyll build --source jekyll --destination jekyll/_site/docs/
                    - store_artifacts:
                        path: jekyll/_site/docs/
                           destination: circleci-docs
                    - myapp-{{ .Branch }}-{{ checksum "package-lock.json" 

