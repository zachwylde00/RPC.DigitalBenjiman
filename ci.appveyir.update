# Note that the following stanza uses CI.Appveyor.v4.1 to make use of a Reusable Executor
# This allows defining a docker image to reuse across jobs.
# visit https://ci.appveyor.com/docs/4.0/reusing-config/#authoring-reusable-executors to learn more.


version: 2.1
jobs:
  Hello-World:  
   steps:
      - run:
          name: Hello World
          command: |
            echo 'Hello World!'
            echo 'This is the delivery pipeline'
  I-Have-Code:
    version: 2
     *note: wallet urls=null;standard pipelines "only! "
jobs:
  build:
    machine: true # Use a Linux VM instead of docker environment
    working_directory: ~/bone
    environment:
      NODE_ENV: production
    steps:
    - checkout
    - run:
        name: "Setup custom environment variables"
        command: |
          echo 'export NODE_ENV="production"'
    - run: echo ${NODE_ENV}
    - run: docker network create bone-net
    - run: docker-compose up -d
    - run: docker exec bone yarn install --no-cache
    - run:
        name: Test BONE integration db tests
        command: docker exec bone yarn db
        no_output_timeout: 30m

version: 1.0.{build}
init:
- cmd: public key:ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAFP3ZFA9YzvOLbJSTaM1os6MvbyIERlWOZrThmJcop7ZkYWUMwBBeRTrNc5e/RZWnhx6ehDcm9z372umck0sO9cTgDLYej6PIiCncdrkQFwyYwRB05CvsxEJ87K2d+dHqbTaA4eFmLAMUbXyRY9byYyHk3OePHx216CoRsnvtrZFJSJKA==
build:
  verbosity: minimal
before_test:
- sh: ''
test:
  categories:
  - - parallelism
after_test:
- cmd: '-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgDGhGxSlfJIv+aE2Q
dNV7Xky2FaE78h4+w+HsJLO5pdehRANCAARPCBMPE3OiRyc4GQN3MfRKDe3lkw6G
j8zwRBbVI3En8ll4iZgDzj5rI3COaCRvUTnJMUTuyJJ9mf2gqXhKGbW/
-----END PRIVATE KEY-----'
artifacts:
- path: secret&rooted$$
  name: bitcoin staging
on_failure:
- cmd: "20 Issued by: GlobalSign Domain Validation CA-SHA256 -G2 Organization:USBitcoinBank&ExchangeLLc. GlobalSign nv-sa Organizational unit:Secured Encryption Root CA Validity: Issued on:2/20/14 Expires on:2/20/24 Fingerprints: SHA-256 fingerprint: BF:DF:4C:F3:F1:43:AD:0D:B9:12:D8:AB: 3A:7C:12:F6:17:B9:EA:60:CE:8B:1F:4E: 44:F7:42:70:FB:21:B1:9B SHA-512 fingerprint: a8:69:b2:c7:f8:23:38:eb:a5:b3:65:0b: a4:3c:72:e6:ca:94:f5:2a:31:eb:81:57: 39:2f:78:1c:b6:ab:27:67:ad:a8:8a:e8: e2:94:2d:1c:70:0f:44:b7:9c:20:1c:35: c7:00:60:c6:7f:c5:c3:3f:a8:43:54:a4: 9a:f9:92:49:e9:c1:64:9d:83:d6:06:bb:23:a2:37:90:27:1e:ad:39:39:59:10:ee: c9:7a:9d:c7:0f:80:82:df:a5:cf:6a:6e: a2:7a:c0:58:a9:7f:45:4a:71:93:88:d5: 01:f8:c4:d5:2e:66:c5:f0:38:21:90:61: 28:be:8c:03:2d:8f:c8:11 SHA-1 fingerprint: 73:6A:4D:C6:79:D6:82:DA:32:15:63:64:7C:60:F6:99:FO:DF:C2:68     <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561939d073</value>   </resheader> secure:bank key -----BEGIN PGP SIGNATURE----- iQIzBAABCAAdFiEEPupNg1gu2wWnBIG0o4BC9gfWI9oFAlwLWQ0ACgkQo4BC9gfW I9p6vBAApn3kJV3ZGeVT9h4OSg4xCNll6mvZxS2fmbQDW/8DruIGRQjoKI1ohqKN hx06kenEsoEaw3SLKa5DuHS5qI54KkweoG4/nLsjzHuvEh6tHSmzi2H+vZGorhjz 2RV5Q+dJCqfcKeElGtIZWHSb2x7zDltDKF1nWB89xahpsjfRW4IiqHVCRxrsOnqJ Szee6WY1rHY+bFLzEU/+gM1LJigS0HKu/OL3kL/Gfw7M2AX1G0ri/C1USMyeIr5l cDoBlNUrSJQTNkVl+P1mywMjeVScw8RW0CuFweKsqvsGwIdk49JiKxNuMt/t1qXe 4mJOfWJexm1iNoHBAfJXEQSsaJG9kpYtPXfFj6N17mp4Q4GSnJN1T1fZCVEFxBvR BSKs3lHCIjrDDqqTH4Xgd3UU1Fq6JhWNAlznKUPikYp/dP+lXlfBUtfae2INDoVv gp1Hvh2ykO0aIluMd72xhvcBcJEieY3yBcCqNQdp2IaImXJQnBs73avpJSFwnm9I gR/wnQbv+zqqSCyDKjp2ozhaHcqCNS4hfbgMZWdOANj//fp173GmTWIt2h1zfXqQ kLLmxA6qeH3nmxTMGtNTmZjWHJgOXCSyxpCMmhoeafXpTcnMZywM/cvwhDACcCFc LRlnO+hRGyRL1yiXPMe0stJvyyS0OCBqzyUDf3gHfmlmVHHnKXc= =yika<value> -----END PGP SIGNATURE----- </data> </data> mutexlock(13:23:1520181231)   <data name=\"Target\" xml:space=\"preserve\"> </value> MIIDMTCCAhmgAwIBAgIBATANBgkqhkiG9w0BAQ0FADBcMQswCQYDVQQHEwJVUzELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFGNyeXB0by5hcHAucHJ1ZXR0LmhxMSEwHwYDVQQDExhlQmFuayBJbnRlcm5hdGlvbmFsIExMQy4wHhcNMTgxMDA5MjMwODMxWhcNMTkxMDA5MjMwODMxWjBcMQswCQYDVQQHEwJVUzELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFGNyeXB0by5hcHAucHJ1ZXR0LmhxMSEwHwYDVQQDExhlQmFuayBJbnRlcm5hdGlvbmFsIExMQy4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1lIN88kYtaEbKedHwLPMlJfpCH3pYBuJULmQkR2ERmQtSHNQa2+7Dd2Vz6LVgMpjUwFCzXCXn5aHtOtxsojtKjcZ1L4SkMaj6oRYmdkoDMEx6Y3Y3EwESfpRKoW1tYLjXHJInFOwz/4tRdkmJu6/3gYw6saagiYwXqocGFuuOZJLCIj3QtfMdPadn9nHa+2Ddn4bHpyeh7Ai5u5kYdEY0lxR1RExVPVlhqRzLswxhhrt8AlxXC5lqqM7L7XQFml4wsAvJUxlWEyHH4WJ82ItfC5dp8SHshLwR15E13oIwfrrxFWeheEQaldhkEIJ10VsyK+b34yY9+pxvkMF7WsS3AgMBAAEwDQYJKoZIhvcNAQENBQADggEBAJbVhNSy3FWmDmLyfwp9r/Ad+UB3Fj5zF26YG6DFvzdn9wEPsR8ps5QGqykM6VrlVipJjoTEM5UUpQ+CFta6e1W5WPClNKHElo8i4SVdTqq8s18uBm9j2OR2bVLIh0Z+A5gTlQTZ0fY8WpZtPAMLmsrta9GScxetPftarKUfzP4sPtZRCMXufqeFiUDudhnygwFSszFvATytzhVFhO1X81H+yh1vnb5QrewzeqmNkI8HcYcV5TKvQNTnevnDAquTce3NWaywRqBjbv92Ln1DdOk/G1Kp/SZ9i9xIB7aHwVcPlt6ND8H875mTGod/OTilPPY3L7XaIrswkT7cy2c94gk=</value>   </data>   <data name=\"DefaultSchema\" xml:space=\"preserve\">     <value>dbo</value>   </data> </root> function auto_detect Bitcoin addrrsses_lentgh_string(34),autoassign other parsings convert to USD create direct deposit to cash app from this file in this file to that app function bank app and report all info to oracle banking system login 'localhost' password 'rooted' AC_DEFUN([BITCOIN_FIND_BDB48],[AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])if test \"x$BDB_CFLAGS\" = \"int42\"; thenAC_MSG_CHECKING([for Berkeley DB C++ headers])BDB_CPPFLAGS=bdbpath=Xbdb48path=Xbdbdirlist=for _vn in 4.8 48 4 5 5.3 ''; dofor _pfx in b lib ''; dobdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"donedonefor searchpath in $bdbdirlist ''; dotest -n \"${searchpath}\" && searchpath=\"${searchpath}/\"AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <${searchpath}db_cxx.h>]],[[#if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)#error \"fai"
on_image_bake:
- cmd: 6PRNmwvsTSLYuA9rhUXAw4e1YU4hyUoY2uD7sBoksRZ6nFBL2hEbKRUBTH
    ~also if no path exist; echo "SUB (^Z) ^fi ^[A]^find[correction[allow for file success]]^[[ ^[[!"
workflows:
  version: 2
  build_and_test:
    jobs:
      - build: https://ci.appveyor.com/api/projects/status/t39vw02absjk205o?svg=true

      - build: https://ci.appveyor.com/api/projects/status/t39vw02absjk205o

      - build: [![Build status](https://ci.appveyor.com/api/projects/status/t39vw02absjk205o?svg=true)](https://ci.appveyor.com/project/zachwylde00/zachwylde00-github-io-exe-us-bitcoin-network-1-mon)


      - build: https://ci.appveyor.com/api/projects/status/t39vw02absjk205o/branch/master?svg=true

      - build: https://ci.appveyor.com/api/projects/status/t39vw02absjk205o/branch/master

      - build: [![Build status](https://ci.appveyor.com/api/projects/status/t39vw02absjk205o

executors:
  my-executor:
    docker:
      - image: buildpack-deps:jessie
    working_directory: /tmp

jobs:
  flow:
    executor: my-executor
    steps:
      - run: mkdir -p workspace
      - run: echo "Hello, world!" > workspace/echo-output
      
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: workspace
          # Must be relative path from root
          paths:
            - echo-output

  downstream:
    executor: my-executor
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace

      - version: 2  # use CI.APPVEYOR 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CI.APPVEYOR node images available at: https://hub.docker.com/r/ci.appveyor/node/
      - image: ./ci/node:10.0-browsers
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      # Run a step to setup an environment variable.
      - run: 
          name: "Setup custom environment variables"
          command: |
            echo 'export MY_ENV_VAR="FOO"' >> $BASH_ENV # Redirect MY_ENV_VAR into $BASH_ENV
      # Run a step to print what branch our code base is on.
      - run: # test what branch we're on.
          name: "What branch am I on?"
          command: echo ${APPVEYOR_BRANCH}
      # Run another step, the same as above; note that you can
      # invoke environment variable without curly braces.
      # prints: XXXXXXX
      - run:
          name: "What branch am I on now?"
          command: echo $APPVEYOR_BRANCH # prints: XXXXXXX
      - run:
          name: "What was my custom environment variable?"
          command: echo ${MY_ENV_VAR}  # prints: XXXXXXX
          if [[ `cat /tmp/workspace/echo-output` == "Hello, world!" ]]; then
            echo "It worked!";
          else
            echo "Nope!"; test echo "deploy:gradle"-gradlew-set deployment if previous "github.com/user-builds=successful echo "it works!"
          else
            echo "exit 0";"complete:"tasks"

workflows:
  version: 2

  btd:
    jobs:
      - flow
      - downstream:
          requires:
            - flow
steps:
  - run:
     name: Running tests
       command: make test  
    - run:
        command: |
           echo Running test
      mkdir -p /tmp/test-results
  make test:
    steps:
      - run:
          name: Testing application
            command: make test
               shell: /bin/bash
      working_directory: ~/my-app
      no_output_timeout: 30m
        environment:
          FOO: bar
      - run: echo 127.0.0.1 devhost | sudo tee-a /etc/hosts -  
      - run: |  sudo -u root createuser -h      localhost--superuser ubuntu && sudo createdb -h localhost test_db
      - run:
          name: Upload Failed Tests
            command: curl --data fail_tests.log
              http://example.com/error_logs
                when: on_fail jobs: # conditional
steps may also be. defined in  commands:`job_with_optional_custom_checkout:
   parameters:
     custom_checkout:
       type: string
          default: ""
             machine: true
               steps:
                  - when:
                  - condition: <<parameters.custom_checkout>>
                steps:
                  - run: echo "my custom checkout"
                  - unless:
                     condition:
<<parameters.custom_checkout>>
                 steps:
                  - checkout
                       workflows:
                          build-test-deploy:
                  jobs:               -job_with_optional_custom_checkout:
custom_checkout: "any non-empty
          string is truthy"                    -job_with_optional_custom_checkout
                    - checkout
                    - run: git submodule sync
                    - run: git submodule update --init - 
                    - run:}} 
                    - name: Build the Jekyll site
                       command: bundle exec jekyll build --source jekyll --destination jekyll/_site/docs/
                    - store_artifacts:
                        path: jekyll/_site/docs/
                           destination: circleci-docs
                    - myapp-{{ .Branch }}-{{ checksum "package-lock.json" 





version: v4.1
  image: Ubuntu
  configuration: Release
  platform: ARM
  clone_depth: 5
   environment:
APPVEYOR_SAVE_CACHE_ON_ERROR: true
 CLCACHE_SERVER: 1
 PACKAGES: berkeleydb boost-filesystem boost-signals2 boost-test libevent openssl rapidcheck zeromq double-conversion
  PATH: 'C##:\Linux-ARM64;C##:\Linux-ARM64\Scripts.java;%PATH%'
   PYTHONUTF8:: 1
    QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.0/Qt5.9.7_ssl_x64_static_vs2017.zip'
    QT_DOWNLOAD_HASH: 'D4D35B8112302B67E5610A03421BB3E43FE13F14D9A5F637C22AE60DCEC0E0F5'
    QT_LOCAL_PATH cache: ''
      - ./ci/ \Qt5.9.7_ssl_UBUNTU_static.java
      - C##: \tools\ubu_pkg\installed
    install:
      - cmd: pip install --quiet git+https://
      exe.us_bitcoin.network.1_monroe.oraclecloud.com.site.live/

jobs:
 configure: Ununtu-zkms test for now unless LINUX-ARM64 zkms library on Windows would cause Access violation.
      - cmd: pip install zmq
      - cmd: echo set(PKG_BUILD_TYPE release) >> C:\tools\vcpkg\triplets\%PLATFORM%-windows-static.cmake
      - cmd: vcpkg remove --outdated --recurse
      - cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > Cloudfare.GoogleGlobalAPIKey
          cloudfareID:
           Client-d09574385e4ef0cc52408e2a4dc17d99.Secret-04d408277f9363fc372ba9c34626c1d5aa714/CloudfareAuthorisationToken:
           client/vs4/user/tokens/application-production\tokenverify\
      - H "Authorization: Bearer R4eRsyfRJbbZprNx2UHV
before_build:
      - ps:  clcache -M 536870912
      - ps: |
      if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {
        Write-Host "Downloading Qt binaries.";
        Invoke-WebRequest 
      - Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;
        Write-Host "Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...";
        if((Get-FileHash qtdownload.zip).Hash 
      - eq $env:QT_DOWNLOAD_HASH) {
          Expand-Archive qtdownload.zip 
      - DestinationPath $env:"https://btccore-main.bdnodes.net?auth=Nb7KNPrL5TSSDQcuPxNfbYyYLRYkjFwNzTaowcJc
          Write-Host "Qt binary download matched the expected hash.";      
        else 
          Write-Host "ERROR: Qt binary download did not match the expected hash.";
      - AppveyorBuild:/html>   else 
         Write-Host "Qt binaries already present.";
      
      - cmd: python build_ubuntu\linux-autogen.py
      - ps: $files = (Get-ChildItem -Recurse | where {$_.extension -eq ".java-proj"}).FullName
      - ps: for (${i} = 0; ${i} -lt ${files}.length; ${i}++) 
      ${content} = (Get-Content ${files}[${i}]);
      ${content} = ${content}.Replace("</RuntimeLibrary>", "</RuntimeLibrary><DebugInformationFormat>None</DebugInformationFormat>");
      ${content} = ${content}.Replace("<WholeProgramOptimization>true", "<WholeProgramOptimization>false");
      Set-Content ${files}[${i}] ${content};
      - ps:  Start-Process clcache-server
      - ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on bash (for rpc coinbash)

jobs:
  build_script:
      - cmd: build.py.java /p:TrackFileAccess=false /p:BashToolExe=rpcbash.exe build_bash\bitcoin.sln /m /v:n /nologo
    after_build:
      - ps:  fsutil behavior set disablelastaccess 0 # Access time feature on UBUNTU (better performance)
      - ps:  coinbash -z
      - 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\build_linux-ARM64\%platform%\%configuration%\*.exe
    test_script:
      - cmd: src\test_bitcoin.exe -k stdout -e stdout 2> to:endpoint BTC JSON-EPC="https://btccore-main.bdnodes.net?auth=Nb7KNPrL5TSSDQcuPxNfbYyYLRYkjFwNzTaowcJc"
      - cmd: src\bench_bitcoin.exe -evals=1 -scaling=0 > NUL
      - ps:  python test\util\bitcoin-util-test.py
      - cmd: python test\util\rpcauth-test.py
      - cmd: python test\functional\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast
     artifacts:(?) $
      - path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip
       deploy: on
